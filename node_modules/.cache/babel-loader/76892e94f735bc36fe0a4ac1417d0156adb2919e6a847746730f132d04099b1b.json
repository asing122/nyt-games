{"ast":null,"code":"var _jsxFileName = \"/Users/annikasingh/Desktop/hi/connections/src/components/vertex/Vertex.tsx\",\n  _s = $RefreshSig$();\nimport { SECTION } from \"../../App\";\nimport { HomeIcon } from \"../../icons/HomeIcon\";\nimport \"../../styles/vertex.css\";\nimport { useEffect, useState } from \"react\";\nimport { spots, triangles } from \"./TriangleCoords\";\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default function Vertex({\n  setSection,\n  lines,\n  setLines,\n  confirmedTriangles,\n  setConfirmedTriangles,\n  done,\n  setDone\n}) {\n  _s();\n  const [dragging, setDragging] = useState(false);\n  const [startCoords, setStartCoords] = useState([]);\n  const [endCoords, setEndCoords] = useState([]);\n  function handleMouseDown(e) {\n    e.preventDefault();\n    setDragging(true);\n    const coords = getClosestNode(e.clientX, e.clientY, 10);\n    if (coords[0] != 0 && coords[1] != 0) {\n      setStartCoords(coords);\n    }\n  }\n  function handleMouseMove(e) {\n    if (dragging) {\n      const coords = [e.clientX, e.clientY];\n      setEndCoords(coords);\n    }\n  }\n  function handleMouseUp() {\n    setDragging(false);\n    if (startCoords.length === 2 && endCoords.length === 2) {\n      const end = getClosestNode(endCoords[0], endCoords[1], 6);\n      if (end[0] != 0 && end[1] != 0) {\n        setLines([...lines, [...startCoords, ...end]]);\n      }\n    }\n    setStartCoords([]);\n    setEndCoords([]);\n  }\n  function getClosestNode(x, y, threshold) {\n    let minDistX = threshold;\n    let minDistY = threshold;\n    let minX = 0,\n      minY = 0;\n    spots.filter(coord => x - coord[0] < threshold && y - coord[1] < threshold).map(coord => {\n      if (Math.abs(x - coord[0]) < minDistX && Math.abs(y - coord[1]) < minDistY && numberOfCircles(coord) > 0) {\n        minDistX = Math.abs(x - coord[0]);\n        minDistY = Math.abs(y - coord[1]);\n        minX = coord[0];\n        minY = coord[1];\n      }\n    });\n    return [minX, minY];\n  }\n  function allLines(triangle) {\n    if (!isConfirmed(triangle)) {\n      const returnVal = findLine(triangle.x1, triangle.y1, triangle.x2, triangle.y2).length > 0 && findLine(triangle.x1, triangle.y1, triangle.x3, triangle.y3).length > 0 && findLine(triangle.x2, triangle.y2, triangle.x3, triangle.y3).length > 0;\n      if (returnVal) {\n        setConfirmedTriangles([...confirmedTriangles, triangle]);\n        const newLines = lines.filter(line => confirmedTriangles.filter(tri => (tri.x1 == line[0] && tri.y1 == line[1] || tri.x2 == line[0] && tri.y2 == line[1] || tri.x3 == line[0] && tri.y3 == line[1]) && (tri.x1 == line[2] && tri.y1 == line[3] || tri.x2 == line[2] && tri.y2 == line[3] || tri.x3 == line[2] && tri.y3 == line[3])).length > 0 || equalLines(findLine(triangle.x1, triangle.y1, triangle.x2, triangle.y2)[0], line) || equalLines(findLine(triangle.x1, triangle.y1, triangle.x3, triangle.y3)[0], line) || equalLines(findLine(triangle.x2, triangle.y2, triangle.x3, triangle.y3)[0], line));\n        setLines(newLines);\n      }\n      return returnVal;\n    }\n    return true;\n  }\n  function isConfirmed(triangle) {\n    return confirmedTriangles.filter(tri => tri.x1 === triangle.x1 && tri.y1 === triangle.y1 && tri.x2 === triangle.x2 && tri.y2 === triangle.y2 && tri.x3 === triangle.x3 && tri.y3 === triangle.y3 && tri.fill === triangle.fill).length > 0;\n  }\n  function equalLines(line1, line2) {\n    return line1[0] == line2[0] && line1[1] == line2[1] && line1[2] == line2[2] && line1[3] == line2[3];\n  }\n  function findLine(x1, y1, x2, y2) {\n    return lines.filter(coords => coords[0] == x1 && coords[1] == y1 && coords[2] == x2 && coords[3] == y2 || coords[0] == x2 && coords[1] == y2 && coords[2] == x1 && coords[3] == y1);\n  }\n  function undoLastLine() {\n    let lastLines = lines;\n    lastLines.pop();\n    setLines(lastLines);\n  }\n  function numberOfCircles(spot) {\n    let count = 0;\n    triangles.map(triangle => {\n      if (!isConfirmed(triangle)) {\n        if (triangle.x1 == spot[0] && triangle.y1 == spot[1]) {\n          count += 1;\n        }\n        if (triangle.x2 == spot[0] && triangle.y2 == spot[1]) {\n          count += 1;\n        }\n        if (triangle.x3 == spot[0] && triangle.y3 == spot[1]) {\n          count += 1;\n        }\n      }\n    });\n    return triangles.filter(triangle => !isConfirmed(triangle) && (triangle.x1 == spot[0] && triangle.y1 == spot[1] || triangle.x2 == spot[0] && triangle.y2 == spot[1] || triangle.x3 == spot[0] && triangle.y3 == spot[1])).length;\n  }\n  useEffect(() => {\n    document.addEventListener(\"mousedown\", handleMouseDown);\n    document.addEventListener(\"mousemove\", handleMouseMove);\n    document.addEventListener(\"mouseup\", handleMouseUp);\n    return () => {\n      document.removeEventListener(\"mousedown\", handleMouseDown);\n      document.removeEventListener(\"mousemove\", handleMouseMove);\n      document.removeEventListener(\"mouseup\", handleMouseUp);\n    };\n  }, [startCoords, endCoords]);\n  useEffect(() => {\n    if (triangles.filter(triangle => isConfirmed(triangle)).length == triangles.length) {\n      setDone(true);\n    }\n  }, [confirmedTriangles]);\n  useEffect(() => {\n    triangles.map(triangle => allLines(triangle));\n  }, [lines]);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"home\",\n      onClick: () => setSection(SECTION.NONE),\n      children: HomeIcon\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 228,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"vertex-board\",\n      style: {\n        width: \"100%\",\n        height: window.innerHeight\n      },\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"spots\",\n        children: [confirmedTriangles.map(triangle => /*#__PURE__*/_jsxDEV(\"svg\", {\n          className: \"strands-svg\",\n          children: /*#__PURE__*/_jsxDEV(\"polygon\", {\n            points: triangle.x1.toString() + \",\" + triangle.y1.toString() + \" \" + triangle.x2.toString() + \",\" + triangle.y2.toString() + \" \" + triangle.x3.toString() + \",\" + triangle.y3.toString(),\n            style: {\n              fill: triangle.fill,\n              stroke: \"black\",\n              strokeWidth: \"0\"\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 239,\n            columnNumber: 17\n          }, this)\n        }, triangle.toString(), false, {\n          fileName: _jsxFileName,\n          lineNumber: 237,\n          columnNumber: 13\n        }, this)), spots.map(spot => numberOfCircles(spot) > 0 && /*#__PURE__*/_jsxDEV(\"svg\", {\n          className: \"vertex-svg\",\n          style: {\n            zIndex: 5\n          },\n          children: [/*#__PURE__*/_jsxDEV(\"circle\", {\n            r: numberOfCircles(spot) + 5,\n            cx: spot[0],\n            cy: spot[1],\n            fill: \"white\",\n            stroke: \"black\",\n            strokeWidth: \"0.5\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 270,\n            columnNumber: 19\n          }, this), /*#__PURE__*/_jsxDEV(\"text\", {\n            x: spot[0],\n            y: spot[1],\n            textAnchor: \"middle\",\n            alignmentBaseline: \"middle\",\n            fontSize: numberOfCircles(spot) + 3,\n            fill: \"black\",\n            children: numberOfCircles(spot)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 278,\n            columnNumber: 19\n          }, this)]\n        }, spot.toString() + Math.random() * 100, true, {\n          fileName: _jsxFileName,\n          lineNumber: 265,\n          columnNumber: 17\n        }, this)), startCoords.length == 2 && endCoords.length == 2 && /*#__PURE__*/_jsxDEV(\"svg\", {\n          className: \"vertex-lines\",\n          style: {\n            zIndex: -5\n          },\n          children: /*#__PURE__*/_jsxDEV(\"line\", {\n            x1: startCoords[0],\n            y1: startCoords[1],\n            x2: endCoords[0],\n            y2: endCoords[1],\n            stroke: \"black\",\n            strokeWidth: \"1\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 301,\n            columnNumber: 15\n          }, this)\n        }, startCoords.toString() + endCoords.toString() + Math.random() * 100, false, {\n          fileName: _jsxFileName,\n          lineNumber: 292,\n          columnNumber: 13\n        }, this), lines.map(line => /*#__PURE__*/_jsxDEV(\"svg\", {\n          className: \"vertex-lines\",\n          style: {\n            zIndex: -5\n          },\n          children: /*#__PURE__*/_jsxDEV(\"line\", {\n            x1: line[0],\n            y1: line[1],\n            x2: line[2],\n            y2: line[3],\n            stroke: \"black\",\n            strokeWidth: \"1\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 321,\n            columnNumber: 15\n          }, this)\n        }, startCoords.toString() + endCoords.toString() + Math.random() * 100, false, {\n          fileName: _jsxFileName,\n          lineNumber: 312,\n          columnNumber: 13\n        }, this)), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: undoLastLine,\n          style: {\n            position: \"fixed\",\n            bottom: 10\n          },\n          children: \"Undo\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 331,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 235,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 231,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n}\n_s(Vertex, \"KhavVHV7WQuYXGVN2J9fg/i+gus=\");\n_c = Vertex;\nvar _c;\n$RefreshReg$(_c, \"Vertex\");","map":{"version":3,"names":["SECTION","HomeIcon","useEffect","useState","spots","triangles","jsxDEV","_jsxDEV","Fragment","_Fragment","Vertex","setSection","lines","setLines","confirmedTriangles","setConfirmedTriangles","done","setDone","_s","dragging","setDragging","startCoords","setStartCoords","endCoords","setEndCoords","handleMouseDown","e","preventDefault","coords","getClosestNode","clientX","clientY","handleMouseMove","handleMouseUp","length","end","x","y","threshold","minDistX","minDistY","minX","minY","filter","coord","map","Math","abs","numberOfCircles","allLines","triangle","isConfirmed","returnVal","findLine","x1","y1","x2","y2","x3","y3","newLines","line","tri","equalLines","fill","line1","line2","undoLastLine","lastLines","pop","spot","count","document","addEventListener","removeEventListener","children","className","onClick","NONE","fileName","_jsxFileName","lineNumber","columnNumber","style","width","height","window","innerHeight","points","toString","stroke","strokeWidth","zIndex","r","cx","cy","textAnchor","alignmentBaseline","fontSize","random","position","bottom","_c","$RefreshReg$"],"sources":["/Users/annikasingh/Desktop/hi/connections/src/components/vertex/Vertex.tsx"],"sourcesContent":["import { SECTION } from \"../../App\";\nimport { HomeIcon } from \"../../icons/HomeIcon\";\nimport \"../../styles/vertex.css\";\nimport { Dispatch, SetStateAction, useEffect, useState } from \"react\";\nimport { spots, triangles } from \"./TriangleCoords\";\n\nexport type Triangle = {\n  x1: number;\n  x2: number;\n  x3: number;\n  y1: number;\n  y2: number;\n  y3: number;\n  fill: string;\n};\n\ntype VertexProps = {\n  setSection: Dispatch<SetStateAction<SECTION>>;\n  lines: number[][];\n  setLines: Dispatch<SetStateAction<number[][]>>;\n  confirmedTriangles: Triangle[];\n  setConfirmedTriangles: Dispatch<SetStateAction<Triangle[]>>;\n  done: boolean;\n  setDone: Dispatch<SetStateAction<boolean>>;\n};\n\nexport default function Vertex({\n  setSection,\n  lines,\n  setLines,\n  confirmedTriangles,\n  setConfirmedTriangles,\n  done,\n  setDone,\n}: VertexProps) {\n  const [dragging, setDragging] = useState<boolean>(false);\n  const [startCoords, setStartCoords] = useState<number[]>([]);\n  const [endCoords, setEndCoords] = useState<number[]>([]);\n\n  function handleMouseDown(e: any) {\n    e.preventDefault();\n    setDragging(true);\n    const coords = getClosestNode(e.clientX, e.clientY, 10);\n    if (coords[0] != 0 && coords[1] != 0) {\n      setStartCoords(coords);\n    }\n  }\n\n  function handleMouseMove(e: any) {\n    if (dragging) {\n      const coords: number[] = [e.clientX, e.clientY];\n      setEndCoords(coords);\n    }\n  }\n\n  function handleMouseUp() {\n    setDragging(false);\n    if (startCoords.length === 2 && endCoords.length === 2) {\n      const end = getClosestNode(endCoords[0], endCoords[1], 6);\n      if (end[0] != 0 && end[1] != 0) {\n        setLines([...lines, [...startCoords, ...end]]);\n      }\n    }\n    setStartCoords([]);\n    setEndCoords([]);\n  }\n\n  function getClosestNode(x: number, y: number, threshold: number) {\n    let minDistX = threshold;\n    let minDistY = threshold;\n    let minX: number = 0,\n      minY: number = 0;\n    spots\n      .filter((coord) => x - coord[0] < threshold && y - coord[1] < threshold)\n      .map((coord) => {\n        if (\n          Math.abs(x - coord[0]) < minDistX &&\n          Math.abs(y - coord[1]) < minDistY &&\n          numberOfCircles(coord) > 0\n        ) {\n          minDistX = Math.abs(x - coord[0]);\n          minDistY = Math.abs(y - coord[1]);\n          minX = coord[0];\n          minY = coord[1];\n        }\n      });\n\n    return [minX, minY];\n  }\n\n  function allLines(triangle: Triangle) {\n    if (!isConfirmed(triangle)) {\n      const returnVal =\n        findLine(triangle.x1, triangle.y1, triangle.x2, triangle.y2).length >\n          0 &&\n        findLine(triangle.x1, triangle.y1, triangle.x3, triangle.y3).length >\n          0 &&\n        findLine(triangle.x2, triangle.y2, triangle.x3, triangle.y3).length > 0;\n      if (returnVal) {\n        setConfirmedTriangles([...confirmedTriangles, triangle]);\n        const newLines = lines.filter(\n          (line) =>\n            confirmedTriangles.filter(\n              (tri) =>\n                ((tri.x1 == line[0] && tri.y1 == line[1]) ||\n                  (tri.x2 == line[0] && tri.y2 == line[1]) ||\n                  (tri.x3 == line[0] && tri.y3 == line[1])) &&\n                ((tri.x1 == line[2] && tri.y1 == line[3]) ||\n                  (tri.x2 == line[2] && tri.y2 == line[3]) ||\n                  (tri.x3 == line[2] && tri.y3 == line[3]))\n            ).length > 0 ||\n            equalLines(\n              findLine(triangle.x1, triangle.y1, triangle.x2, triangle.y2)[0],\n              line\n            ) ||\n            equalLines(\n              findLine(triangle.x1, triangle.y1, triangle.x3, triangle.y3)[0],\n              line\n            ) ||\n            equalLines(\n              findLine(triangle.x2, triangle.y2, triangle.x3, triangle.y3)[0],\n              line\n            )\n        );\n        setLines(newLines);\n      }\n      return returnVal;\n    }\n    return true;\n  }\n\n  function isConfirmed(triangle: Triangle) {\n    return (\n      confirmedTriangles.filter(\n        (tri) =>\n          tri.x1 === triangle.x1 &&\n          tri.y1 === triangle.y1 &&\n          tri.x2 === triangle.x2 &&\n          tri.y2 === triangle.y2 &&\n          tri.x3 === triangle.x3 &&\n          tri.y3 === triangle.y3 &&\n          tri.fill === triangle.fill\n      ).length > 0\n    );\n  }\n\n  function equalLines(line1: number[], line2: number[]) {\n    return (\n      line1[0] == line2[0] &&\n      line1[1] == line2[1] &&\n      line1[2] == line2[2] &&\n      line1[3] == line2[3]\n    );\n  }\n\n  function findLine(x1: number, y1: number, x2: number, y2: number) {\n    return lines.filter(\n      (coords) =>\n        (coords[0] == x1 &&\n          coords[1] == y1 &&\n          coords[2] == x2 &&\n          coords[3] == y2) ||\n        (coords[0] == x2 &&\n          coords[1] == y2 &&\n          coords[2] == x1 &&\n          coords[3] == y1)\n    );\n  }\n\n  function undoLastLine() {\n    let lastLines = lines;\n    lastLines.pop();\n    setLines(lastLines);\n  }\n\n  function numberOfCircles(spot: number[]) {\n    let count = 0;\n    triangles.map((triangle) => {\n      if (!isConfirmed(triangle)) {\n        if (triangle.x1 == spot[0] && triangle.y1 == spot[1]) {\n          count += 1;\n        }\n        if (triangle.x2 == spot[0] && triangle.y2 == spot[1]) {\n          count += 1;\n        }\n        if (triangle.x3 == spot[0] && triangle.y3 == spot[1]) {\n          count += 1;\n        }\n      }\n    });\n\n    return triangles.filter(\n      (triangle) =>\n        !isConfirmed(triangle) &&\n        ((triangle.x1 == spot[0] && triangle.y1 == spot[1]) ||\n          (triangle.x2 == spot[0] && triangle.y2 == spot[1]) ||\n          (triangle.x3 == spot[0] && triangle.y3 == spot[1]))\n    ).length;\n  }\n\n  useEffect(() => {\n    document.addEventListener(\"mousedown\", handleMouseDown);\n    document.addEventListener(\"mousemove\", handleMouseMove);\n    document.addEventListener(\"mouseup\", handleMouseUp);\n\n    return () => {\n      document.removeEventListener(\"mousedown\", handleMouseDown);\n      document.removeEventListener(\"mousemove\", handleMouseMove);\n      document.removeEventListener(\"mouseup\", handleMouseUp);\n    };\n  }, [startCoords, endCoords]);\n\n  useEffect(() => {\n    if (\n      triangles.filter((triangle) => isConfirmed(triangle)).length ==\n      triangles.length\n    ) {\n      setDone(true);\n    }\n  }, [confirmedTriangles]);\n\n  useEffect(() => {\n    triangles.map((triangle) => allLines(triangle));\n  }, [lines]);\n\n  return (\n    <>\n      <div className=\"home\" onClick={() => setSection(SECTION.NONE)}>\n        {HomeIcon}\n      </div>\n      <div\n        className=\"vertex-board\"\n        style={{ width: \"100%\", height: window.innerHeight }}\n      >\n        <div className=\"spots\">\n          {confirmedTriangles.map((triangle) => (\n            <svg className=\"strands-svg\" key={triangle.toString()}>\n              {\n                <polygon\n                  points={\n                    triangle.x1.toString() +\n                    \",\" +\n                    triangle.y1.toString() +\n                    \" \" +\n                    triangle.x2.toString() +\n                    \",\" +\n                    triangle.y2.toString() +\n                    \" \" +\n                    triangle.x3.toString() +\n                    \",\" +\n                    triangle.y3.toString()\n                  }\n                  style={{\n                    fill: triangle.fill,\n                    stroke: \"black\",\n                    strokeWidth: \"0\",\n                  }}\n                />\n              }\n            </svg>\n          ))}\n          {spots.map(\n            (spot) =>\n              numberOfCircles(spot) > 0 && (\n                <svg\n                  className=\"vertex-svg\"\n                  key={spot.toString() + Math.random() * 100}\n                  style={{ zIndex: 5 }}\n                >\n                  <circle\n                    r={numberOfCircles(spot) + 5}\n                    cx={spot[0]}\n                    cy={spot[1]}\n                    fill=\"white\"\n                    stroke=\"black\"\n                    strokeWidth=\"0.5\"\n                  />\n                  <text\n                    x={spot[0]}\n                    y={spot[1]}\n                    textAnchor=\"middle\"\n                    alignmentBaseline=\"middle\"\n                    fontSize={numberOfCircles(spot) + 3}\n                    fill=\"black\"\n                  >\n                    {numberOfCircles(spot)}\n                  </text>\n                </svg>\n              )\n          )}\n          {startCoords.length == 2 && endCoords.length == 2 && (\n            <svg\n              className=\"vertex-lines\"\n              key={\n                startCoords.toString() +\n                endCoords.toString() +\n                Math.random() * 100\n              }\n              style={{ zIndex: -5 }}\n            >\n              <line\n                x1={startCoords[0]}\n                y1={startCoords[1]}\n                x2={endCoords[0]}\n                y2={endCoords[1]}\n                stroke=\"black\"\n                strokeWidth=\"1\"\n              />\n            </svg>\n          )}\n          {lines.map((line) => (\n            <svg\n              className=\"vertex-lines\"\n              key={\n                startCoords.toString() +\n                endCoords.toString() +\n                Math.random() * 100\n              }\n              style={{ zIndex: -5 }}\n            >\n              <line\n                x1={line[0]}\n                y1={line[1]}\n                x2={line[2]}\n                y2={line[3]}\n                stroke=\"black\"\n                strokeWidth=\"1\"\n              />\n            </svg>\n          ))}\n          <button\n            onClick={undoLastLine}\n            style={{ position: \"fixed\", bottom: 10 }}\n          >\n            Undo\n          </button>\n        </div>\n      </div>\n    </>\n  );\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}